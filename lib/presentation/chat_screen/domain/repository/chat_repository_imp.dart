////********** AUTOGENERATED FILE: DO NOT REMOVE ANY COMMENT IN THIS STYLE **********////
////********** START IMPORTS **********////

import 'package:injectable/injectable.dart';
import 'package:taousapp/presentation/chat_screen/data/source/chat_firebase_datasource.dart';
import 'package:taousapp/presentation/chat_screen/domain/repository/chat_repository.dart';
import 'package:taousapp/presentation/chat_screen/domain/usecases/create_chat.dart';
import 'package:taousapp/presentation/chat_screen/domain/usecases/create_message.dart';
import 'package:taousapp/presentation/chat_screen/domain/usecases/delete_chat.dart';
import 'package:taousapp/presentation/chat_screen/domain/usecases/delete_message.dart';
import 'package:taousapp/presentation/chat_screen/domain/usecases/get_all_chats.dart';
import 'package:taousapp/presentation/chat_screen/domain/usecases/get_all_messages.dart';
import 'package:taousapp/presentation/chat_screen/domain/usecases/get_chat_id_for_users.dart';
import 'package:taousapp/presentation/chat_screen/domain/usecases/update_unread_messages_usecase.dart';
////********** END IMPORTS **********////

@LazySingleton(as: ChatRepository)
class ChatsRepositoryImp implements ChatRepository {
////********** END VARIABLES **********////

  ChatsRepositoryImp({
////********** START RECEIVE VALUES **********////
    required ChatFirebaseDataSource chatsFirebaseDataSource,
    required ChatFirebaseDataSource chatFirebaseDataSource,
////********** END RECEIVE VALUES **********////
  })  :
////********** START SET VALUES **********////
        _chatsFirebaseDataSource = chatsFirebaseDataSource,
        _chatFirebaseDataSource = chatFirebaseDataSource
////********** END SET VALUES **********////
  ;
////********** START VARIABLES **********////
  final ChatFirebaseDataSource _chatsFirebaseDataSource;
  final ChatFirebaseDataSource _chatFirebaseDataSource;

////********** START METHODS **********////
  /// [CreateChatUsecaseInput] is received to [createChat] method as parameter
  /// [CreateChatUsecaseOutput] is returned from [createChat] method
  @override
  Future<CreateChatUsecaseOutput> createChat(
    CreateChatUsecaseInput input,
  ) async {
    return _chatsFirebaseDataSource.createChat(input);
  }

  /// [DeleteChatUsecaseInput] is received to [deleteChat] method as parameter
  /// [DeleteChatUsecaseOutput] is returned from [deleteChat] method
  @override
  Future<DeleteChatUsecaseOutput> deleteChat(
    DeleteChatUsecaseInput input,
  ) async {
    return _chatsFirebaseDataSource.deleteChat(input);
  }

  /// [CreateMessageUsecaseInput] is received to [createMessage] method a
  /// parameter
  /// [CreateMessageUsecaseOutput] is returned from [createMessage] method
  @override
  Future<CreateMessageUsecaseOutput> createMessage(
    CreateMessageUsecaseInput input,
  ) async {
    return _chatsFirebaseDataSource.createMessage(input);
  }

  /// [DeleteMessageUsecaseInput] is received to [deleteMessage] method as
  /// parameter
  /// [DeleteMessageUsecaseOutput] is returned from [deleteMessage] method
  @override
  Future<DeleteMessageUsecaseOutput> deleteMessage(
    DeleteMessageUsecaseInput input,
  ) async {
    return _chatsFirebaseDataSource.deleteMessage(input);
  }

  /// [GetAllChatsUsecaseInput] is received to [getAllChats] method as
  /// parameter
  /// [GetAllChatsUsecaseOutput] is returned from [getAllChats] method
  @override
  Future<GetAllChatsUsecaseOutput> getAllChats(
    GetAllChatsUsecaseInput input,
  ) async {
    return _chatsFirebaseDataSource.getAllChats(input);
  }

  /// [GetAllMessagesUsecaseInput] is received to [getAllMessages] method as
  /// parameter
  /// [GetAllMessagesUsecaseOutput] is returned from [getAllMessages] method
  @override
  Future<GetAllMessagesUsecaseOutput> getAllMessages(
    GetAllMessagesUsecaseInput input,
  ) async {
    return _chatsFirebaseDataSource.getAllMessages(input);
  }

  /// [GetChatIdForUsersUsecaseInput] is received to [getChatIdForUsers] method
  /// as parameter
  /// [GetChatIdForUsersUsecaseOutput] is returned from [get ChatIdForUsers]
  /// method
  @override
  Future<GetChatIdForUsersUsecaseOutput> getChatIdForUsers(
    GetChatIdForUsersUsecaseInput input,
  ) async {
    return _chatFirebaseDataSource.getChatIdForUsers(input);
  }

  @override
  Future<MarkReadMessagesUsecaseOutput> updateUnReadMessages(
    MarkReadMessagesUsecaseInput input,
  ) {
    return _chatFirebaseDataSource.updateUnReadMessages(input);
  }

////********** END METHODS **********////
}
