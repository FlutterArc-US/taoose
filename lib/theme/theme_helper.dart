import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.primaryContainer.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.deepPurple800,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(4.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.gray8002d,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(6.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray20001,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 13.fSize,
          fontFamily: 'Nunito Sans',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.blueGray200,
          fontSize: 11.fSize,
          fontFamily: 'Nunito Sans',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 28.fSize,
          fontFamily: 'Nunito Sans',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 24.fSize,
          fontFamily: 'Nunito Sans',
          fontWeight: FontWeight.w400,
        ),
        labelLarge: TextStyle(
          color: colorScheme.primaryContainer.withOpacity(1),
          fontSize: 12.fSize,
          fontFamily: 'Nunito Sans',
          fontWeight: FontWeight.w600,
        ),
        labelMedium: TextStyle(
          color: colorScheme.primaryContainer.withOpacity(1),
          fontSize: 11.fSize,
          fontFamily: 'Sk-Modernist',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 20.fSize,
          fontFamily: 'Nunito Sans',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 16.fSize,
          fontFamily: 'Nunito Sans',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 14.fSize,
          fontFamily: 'Nunito Sans',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFE61E79),
    primaryContainer: Color(0XF2FFFFFF),
    secondary: Color(0XF2FFFFFF),
    secondaryContainer: Color(0XFFB224A7),
    tertiary: Color(0XF2FFFFFF),
    tertiaryContainer: Color(0XFFB224A7),

    // Background colors
    background: Color(0XF2FFFFFF),

    // Surface colors
    surface: Color(0XF2FFFFFF),
    surfaceTint: Color(0XFF110C26),
    surfaceVariant: Color(0XFFB224A7),

    // Error colors
    error: Color(0XFF110C26),
    errorContainer: Color(0XFFB224A7),
    onError: Color(0XFF6B6B6B),
    onErrorContainer: Color(0XFF110C26),

    // On colors(text colors)
    onBackground: Color(0XFF33302E),
    onInverseSurface: Color(0XFF6B6B6B),
    onPrimary: Color(0XFF110C26),
    onPrimaryContainer: Color(0XFF33302E),
    onSecondary: Color(0XFF33302E),
    onSecondaryContainer: Color(0XFF110C26),
    onTertiary: Color(0XFF33302E),
    onTertiaryContainer: Color(0XFF110C26),

    // Other colors
    outline: Color(0XFF110C26),
    outlineVariant: Color(0XF2FFFFFF),
    scrim: Color(0XF2FFFFFF),
    shadow: Color(0XFF110C26),

    // Inverse colors
    inversePrimary: Color(0XF2FFFFFF),
    inverseSurface: Color(0XFF110C26),

    // Pending colors
    onSurface: Color(0XFF33302E),
    onSurfaceVariant: Color(0XFF110C26),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue500 => Color(0XFF2196F3);

  // BlueGray
  Color get blueGray100 => Color(0XFFD5D5D5);
  Color get blueGray10001 => Color(0XFFD9D9D9);
  Color get blueGray200 => Color(0XFFADAFBB);
  Color get blueGray300 => Color(0XFF9CA4AB);
  Color get blueGray400 => Color(0XFF777E90);
  Color get blueGray40001 => Color(0XFF78828A);
  Color get blueGray40002 => Color(0XFF888888);

  // Cyan
  Color get cyanA200 => Color(0XFF00FFFF);

  // DeepPurple
  Color get deepPurple800 => Color(0XFF432D8A);

  // Gray
  Color get gray100 => Color(0XFFF4F4F4);
  Color get gray10001 => Color(0XFFF6F6F6);
  Color get gray10002 => Color(0XFFF1F3F8);
  Color get gray10003 => Color(0XFFF3F3F3);
  Color get gray10004 => Color(0XFFF0F2F7);
  Color get gray10005 => Color(0XFFF2F2F2);
  Color get gray200 => Color(0XFFE8EAEC);
  Color get gray20001 => Color(0XFFE8E6EA);
  Color get gray20002 => Color(0XFFEEEEEE);
  Color get gray300 => Color(0XFFDDDDDD);
  Color get gray400 => Color(0XFFAFAFAF);
  Color get gray500 => Color(0XFF9B9B9B);
  Color get gray50001 => Color(0XFF9597A1);
  Color get gray50002 => Color(0XFF979797);
  Color get gray50003 => Color(0XFF9496A1);
  Color get gray600 => Color(0XFF747688);
  Color get gray60001 => Color(0XFF888383);
  Color get gray60002 => Color(0XFF777777);
  Color get gray700 => Color(0XFF555555);
  Color get gray900 => Color(0XFF202023);
  Color get gray90001 => Color(0XFF181725);
  Color get gray90002 => Color(0XFF171725);
  Color get gray90003 => Color(0XFF262626);
  Color get gray90004 => Color(0XFF200E32);
  Color get gray90005 => Color(0XFF201F23);

  // Grayd
  Color get gray8002d => Color(0X2D3C3C43);

  // Green
  Color get greenA700 => Color(0XFF00FF00);
  Color get greenA70001 => Color(0XFF1DC01D);

  // Indigo
  Color get indigo50 => Color(0XFFE3E9ED);
  Color get indigo500 => Color(0XFF4267B2);
  Color get indigo900 => Color(0XFF1C1565);
  Color get indigoA200 => Color(0XFF5A61FF);
  Color get indigoA700 => Color(0XFF0032FF);

  // Purple
  Color get purple700 => Color(0XFF8A2387);

  // Red
  Color get red400 => Color(0XFFE94057);
  Color get redA400 => Color(0XFFF41E51);
  Color get redA700 => Color(0XFFE60B0B);

  // White
  Color get whiteA700 => Color(0XFFFEFEFE);

  // Yellow
  Color get yellow900 => Color(0XFFF27121);
  Color get yellow90001 => Color(0XFFF08C1E);
  Color get yellowA70049 => Color(0X49FFDD00);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
